{"title":"CSP第二题详解","slug":"CSP第二题详解","date":"2022-12-30T16:00:00.000Z","updated":"2023-01-02T15:12:23.492Z","comments":true,"path":"api/articles/CSP第二题详解.json","photos":[],"link":"","excerpt":"引言首先声明，我的这篇文章仅更新20年之后的这三年的第二题，但也有两道17年的题目，因为我把所有CSP的第二题做过之后发现，20年之前的难度相较于20年之后的难度还是有比较大的区别的....","covers":null,"content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><code>首先声明，我的这篇文章仅更新20年之后的这三年的第二题，但也有两道17年的题目，因为我把所有CSP的第二题做过之后发现，20年之前的难度相较于20年之后的难度还是有比较大的区别的....</code></p>\n<span id=\"more\"></span>\n\n<p><code>首先是题目类型就有很大的区别，我个人观点是20年之前的其实相对来说是比较容易的，因为大多并不涉及算法，只要能够理清楚思路，大多暴力算法就可以解出，就算是思路不是很清晰，也可以通过一些比较繁杂的计算或者说是一步一步慢慢的算，也是能算出答案的。但是对于20年之后的这些题目来说，如果只是按照之前的结果，一般只能得70分，只有70分是可以通过暴力算法解出来的，但对于另外的30分来说，必须要使用算法， 而这也是我觉得进两年题目比较难的原因，但这些算法相对来说确实很适合初步接触算法的人（比如我个水平的人），难度相对来说也并不是很大，也比较容易理解，理解之后个人一种豁然开朗的感觉，因此我决定将这几道题进行一个详解，不仅是希望自己能够更好的理解这些题目，更希望可以帮助其他人。</code></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p><a href=\"#CSP201712-2%E6%B8%B8%E6%88%8F\">CSP 201712-2 游戏</a></p>\n<p><a href=\"#CSP201709-2%E5%85%AC%E5%85%B1%E9%92%A5%E5%8C%99%E7%9B%92\">CSP 201709-2 公共钥匙盒</a></p>\n<h2 id=\"CSP201712-2游戏\"><a href=\"#CSP201712-2游戏\" class=\"headerlink\" title=\"CSP201712-2游戏\"></a>CSP201712-2游戏</h2><p><strong>问题描述</strong></p>\n<p>　　有<em>n</em>个小朋友围成一圈玩游戏，小朋友从1至<em>n</em>编号，2号小朋友坐在1号小朋友的顺时针方向，3号小朋友坐在2号小朋友的顺时针方向，……，1号小朋友坐在<em>n</em>号小朋友的顺时针方向。<br>　　游戏开始，从1号小朋友开始顺时针报数，接下来每个小朋友的报数是上一个小朋友报的数加1。若一个小朋友报的数为<em>k</em>的倍数或其末位数（即数的个位）为<em>k</em>，则该小朋友被淘汰出局，不再参加以后的报数。当游戏中只剩下一个小朋友时，该小朋友获胜。<br>　　例如，当n&#x3D;5, k&#x3D;2时：<br>　　1号小朋友报数1；<br>　　2号小朋友报数2淘汰；<br>　　3号小朋友报数3；<br>　　4号小朋友报数4淘汰；<br>　　5号小朋友报数5；<br>　　1号小朋友报数6淘汰；<br>　　3号小朋友报数7；<br>　　5号小朋友报数8淘汰；<br>　　3号小朋友获胜。</p>\n<p>　　给定<em>n</em>和<em>k</em>，请问最后获胜的小朋友编号为多少？</p>\n<p><strong>输入格式</strong></p>\n<p>　　输入一行，包括两个整数<em>n</em>和<em>k</em>，意义如题目所述。</p>\n<p><strong>输出格式</strong></p>\n<p>　　输出一行，包含一个整数，表示获胜的小朋友编号。</p>\n<p><strong>样例输入</strong></p>\n<p>5 2</p>\n<p><strong>样例输出</strong></p>\n<p>3</p>\n<p><strong>样例输入</strong></p>\n<p>7 3</p>\n<p><strong>样例输出</strong></p>\n<p>4</p>\n<p><strong>数据规模和约定</strong></p>\n<p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>k</em> ≤ 9。</p>\n<p><strong>详解：</strong></p>\n<p>这一题我本身是做出来的，最早是想用循环链表来做的，但实在是因为自己数据结构的知识全部忘完了，所以就没采用链表的方法，还是用数组做出来了，然后我上网搜一下看有没有其他不一样的思路，还真让我找到一个，我觉得整个思路非常的好，好像用了一个叫模拟链表的方法，所以就想把他的这个记录下来。</p>\n<h2 id=\"CSP201709-2公共钥匙盒\"><a href=\"#CSP201709-2公共钥匙盒\" class=\"headerlink\" title=\"CSP201709-2公共钥匙盒\"></a>CSP201709-2公共钥匙盒</h2><p><strong>问题描述</strong></p>\n<p>有一个学校的老师共用<em>N</em>个教室，按照规定，所有的钥匙都必须放在公共钥匙盒里，老师不能带钥匙回家。每次老师上课前，都从公共钥匙盒里找到自己上课的教室的钥匙去开门，上完课后，再将钥匙放回到钥匙盒中。<br>钥匙盒一共有<em>N</em>个挂钩，从左到右排成一排，用来挂<em>N</em>个教室的钥匙。一串钥匙没有固定的悬挂位置，但钥匙上有标识，所以老师们不会弄混钥匙。<br>每次取钥匙的时候，老师们都会找到自己所需要的钥匙将其取走，而不会移动其他钥匙。每次还钥匙的时候，还钥匙的老师会找到最左边的空的挂钩，将钥匙挂在这个挂钩上。如果有多位老师还钥匙，则他们按钥匙编号从小到大的顺序还。如果同一时刻既有老师还钥匙又有老师取钥匙，则老师们会先将钥匙全还回去再取出。<br>今天开始的时候钥匙是按编号从小到大的顺序放在钥匙盒里的。有<em>K</em>位老师要上课，给出每位老师所需要的钥匙、开始上课的时间和上课的时长，假设下课时间就是还钥匙时间，请问最终钥匙盒里面钥匙的顺序是怎样的？</p>\n<p><strong>输入格式</strong></p>\n<p>输入的第一行包含两个整数<em>N</em>, <em>K</em>。<br>接下来<em>K</em>行，每行三个整数<em>w</em>, <em>s</em>, <em>c</em>，分别表示一位老师要使用的钥匙编号、开始上课的时间和上课的时长。可能有多位老师使用同一把钥匙，但是老师使用钥匙的时间不会重叠。<br>保证输入数据满足输入格式，你不用检查数据合法性。</p>\n<p><strong>输出格式</strong></p>\n<p>输出一行，包含<em>N</em>个整数，相邻整数间用一个空格分隔，依次表示每个挂钩上挂的钥匙编号。</p>\n<p><strong>样例输入</strong></p>\n<p>5 2<br>4 3 3<br>2 2 7</p>\n<p><strong>样例输出</strong></p>\n<p>1 4 3 2 5</p>\n<p><strong>样例说明</strong></p>\n<p>第一位老师从时刻3开始使用4号教室的钥匙，使用3单位时间，所以在时刻6还钥匙。第二位老师从时刻2开始使用钥匙，使用7单位时间，所以在时刻9还钥匙。<br>每个关键时刻后的钥匙状态如下（X表示空）：<br>时刻2后为1X345；<br>时刻3后为1X3X5；<br>时刻6后为143X5；<br>时刻9后为14325。</p>\n<p><strong>样例输入</strong></p>\n<p>5 7<br>1 1 14<br>3 3 12<br>1 15 12<br>2 7 20<br>3 18 12<br>4 21 19<br>5 30 9</p>\n<p><strong>样例输出</strong></p>\n<p>1 2 3 5 4</p>\n<p><strong>评测用例规模与约定</strong></p>\n<p>对于30%的评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 10, 1 ≤ <em>w</em> ≤ <em>N</em>, 1 ≤ <em>s</em>, <em>c</em> ≤ 30；<br>对于60%的评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 50，1 ≤ <em>w</em> ≤ <em>N</em>，1 ≤ <em>s</em> ≤ 300，1 ≤ <em>c</em> ≤ 50；<br>对于所有评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 1000，1 ≤ <em>w</em> ≤ <em>N</em>，1 ≤ <em>s</em> ≤ 10000，1 ≤ <em>c</em> ≤ 100。</p>\n<p><strong>详解：</strong></p>\n<p>这一题确实是我的问题，我说了20年之后的题目难度不是很大，这个却有点打脸了，虽然有些题目我也没有得满分，但思路方面都还是没问题的，但这一题却可能因为自己心态或者说就是自己能力不足然后没做出来，然后搜了一下发现好像确实挺巧妙的，尤其是那两个数组的设置，所以想记录一下，这也是我做的最后一道第二题，然后也是我第一次记录发表到博客上，希望这是一个好的开始，不多罗嗦了，直接开始吧。</p>\n<p>这一题主要还是思路方面，我其实是没有思路的，然后自己也没深入去想就直接搜答案了，确实不是一个好的习惯。然后这一题主要是那两个数组，我觉得十分的巧妙，key[i]代表的是当前位置放的几号钥匙，last[i]表示编号i的钥匙放什么位置。</p>\n<ol>\n<li>首先要计算出所有钥匙都放回的时间End，然后在此基础上来处理每个时间点钥匙的取放；</li>\n<li>对于每个时间点，需要我们先放钥匙，然后再取钥匙，放钥匙的顺序记得是从最左边开始，而且如果多把钥匙同时放的话需要我们从钥匙号最小的开始，因此这里需要用到一个sort函数，将钥匙号从小到大排序；</li>\n</ol>\n<p>最巧妙的就是这两个数组的设置，让这一题的解答变得简单了很多，直接跟着代码来看思路吧——</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> N, K, End = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> key[<span class=\"number\">1010</span>], last[<span class=\"number\">1010</span>]; <span class=\"comment\">// key表示当前位置放几号钥匙，last表示编号为i的钥匙放在什么位置</span></span><br><span class=\"line\"><span class=\"comment\">//定义了一个结构体，存放取钥匙的信息，用一个end的成员变量来代表使用结束时间</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> w;</span><br><span class=\"line\">    <span class=\"type\">int</span> s;</span><br><span class=\"line\">    <span class=\"type\">int</span> c;</span><br><span class=\"line\">    <span class=\"type\">int</span> end;</span><br><span class=\"line\">&#125; a[<span class=\"number\">1010</span>];</span><br><span class=\"line\"><span class=\"comment\">//之后将要用到sort函数，然后提前定义排序方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">const</span> node &amp;a, <span class=\"type\">const</span> node &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.w &lt; b.w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; N &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= K; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i].w &gt;&gt; a[i].s &gt;&gt; a[i].c;</span><br><span class=\"line\">        a[i].end = a[i].s + a[i].c; <span class=\"comment\">//计算出每次取用钥匙的结束时间</span></span><br><span class=\"line\">        End = <span class=\"built_in\">max</span>(a[i].end, End); <span class=\"comment\">//用End表示最终结束的时间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        key[i] = i;</span><br><span class=\"line\">        last[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= End; i++) <span class=\"comment\">//时间为1~End</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//先还钥匙，还钥匙顺序为从小到大，因此要比较的是a[i].w，按照钥匙号的大小从小到大排序</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + K + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">        <span class=\"comment\">//在每一个时间点，都是先还钥匙，然后再取钥匙</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= K; j++) <span class=\"comment\">//还钥匙</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j].end == i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= N; k++) <span class=\"comment\">//还钥匙需要将钥匙挂到最左边的位置上</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!key[k]) <span class=\"comment\">//如果key[k]为0，代表k这个位置上没有钥匙，则将钥匙放到该位置上</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        key[k] = a[j].w; <span class=\"comment\">//k这个位置此刻的钥匙的编号为a[j].w</span></span><br><span class=\"line\">                        last[a[j].w] = k; <span class=\"comment\">//a[j].w放的位置为k</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= K; j++) <span class=\"comment\">//取钥匙</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j].s == i) <span class=\"comment\">//如果到达开始时间</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                key[last[a[j].w]] = <span class=\"number\">0</span>; <span class=\"comment\">//a[j].w号钥匙所放的位置的当前位置为0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; key[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":[],"tags":[{"name":"CSP","slug":"CSP","count":1,"path":"api/tags/CSP.json"},{"name":"编程","slug":"编程","count":1,"path":"api/tags/编程.json"}]}