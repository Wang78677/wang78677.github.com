{"title":"差分算法","slug":"差分算法","date":"2023-02-13T16:00:00.000Z","updated":"2023-02-14T07:46:10.649Z","comments":true,"path":"api/articles/差分算法.json","photos":[],"link":"","excerpt":"差分算法一、差分1、介绍一般地，差分主要用于让一个序列某一特定范围内的所有值都加上或减去一个常数。    所以差分往往应用于线性的场合，即一维数组的环境，但是除此之外，差分还可以应用于二维数组，但是相比较一维数组，应用的较少。 2、定义差分可以简单的看成序列中每个元素与其前一个元素的差。","covers":["/../images/image-20230214154301674.png","/../images/image-20230214154412211.png","/../images/image-20230214154502530.png"],"content":"<h1 id=\"差分算法\"><a href=\"#差分算法\" class=\"headerlink\" title=\"差分算法\"></a>差分算法</h1><h2 id=\"一、差分\"><a href=\"#一、差分\" class=\"headerlink\" title=\"一、差分\"></a>一、差分</h2><h3 id=\"1、介绍\"><a href=\"#1、介绍\" class=\"headerlink\" title=\"1、介绍\"></a>1、介绍</h3><p>一般地，差分主要用于让一个序列某一特定范围内的所有值都加上或减去一个常数。</p>\n<pre><code>    所以差分往往应用于线性的场合，即一维数组的环境，但是除此之外，差分还可以应用于二维数组，但是相比较一维数组，应用的较少。 \n</code></pre>\n<h3 id=\"2、定义\"><a href=\"#2、定义\" class=\"headerlink\" title=\"2、定义\"></a>2、定义</h3><p>差分可以简单的看成序列中每个元素与其前一个元素的差。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"3、差分与前缀和\"><a href=\"#3、差分与前缀和\" class=\"headerlink\" title=\"3、差分与前缀和\"></a>3、差分与前缀和</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n; <span class=\"comment\">//n数组长度</span></span><br><span class=\"line\"><span class=\"comment\">//定义两个一维整形数组 a为原数组，b为差分数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据定义可知</span></span><br><span class=\"line\">b[i] = a[i] - a[i<span class=\"number\">-1</span>];</span><br><span class=\"line\"><span class=\"comment\">//稍微具体</span></span><br><span class=\"line\">b[<span class=\"number\">1</span>] = a[<span class=\"number\">1</span>];</span><br><span class=\"line\">b[<span class=\"number\">2</span>] = a[<span class=\"number\">2</span>] - a[<span class=\"number\">1</span>];</span><br><span class=\"line\">b[<span class=\"number\">3</span>] = a[<span class=\"number\">3</span>] - a[<span class=\"number\">2</span>];</span><br><span class=\"line\">...</span><br><span class=\"line\">b[i] = a[i] - a[i<span class=\"number\">-1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转化一下，求数组b的前缀和,根据上面公式可得</span></span><br><span class=\"line\">  b[<span class=\"number\">1</span>]+b[<span class=\"number\">2</span>]+b[<span class=\"number\">3</span>]+...+b[i]</span><br><span class=\"line\">= a[<span class=\"number\">1</span>]+(a[<span class=\"number\">2</span>]-a[<span class=\"number\">1</span>])+(a[<span class=\"number\">3</span>]-a[<span class=\"number\">2</span>])+...+(a[i]-a[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">= a[i]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由此可知，原序列为差分序列的前缀和序列</span></span><br><span class=\"line\">a[i] = b[<span class=\"number\">1</span>]+b[<span class=\"number\">2</span>]+b[<span class=\"number\">3</span>]+...+b[i];</span><br></pre></td></tr></table></figure>\n\n<pre><code>一般地，我们认为原序列就是差分序列的前缀和，所以把差分看做前缀和的逆运算\n</code></pre>\n<h2 id=\"二、一维差分\"><a href=\"#二、一维差分\" class=\"headerlink\" title=\"二、一维差分\"></a>二、一维差分</h2><h3 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h3><p>一维差分是指给定一个长度为n的序列a，要求支持操作pro(l,r,c)表示对a[l]~a[r]区间上的每一个值都加上或减去常数c，并求修改后的序列a。</p>\n<h3 id=\"2、作用\"><a href=\"#2、作用\" class=\"headerlink\" title=\"2、作用\"></a>2、作用</h3><p>让一个序列中某个区间内的所有值均加上或减去一个常数。</p>\n<p>可以将对a数组任意区间的同一操作优化到O(1)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//区间[l,r]中的所有值都加上常数c</span></span><br><span class=\"line\">b[l] += c;</span><br><span class=\"line\">b[r+<span class=\"number\">1</span>] -= c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上边语句实现原理 b相当于a的辅助数组</span></span><br><span class=\"line\"><span class=\"comment\">//把a序列分为[1,l-1],[l,r],[r+1,n]三部分,由差分定义和与前缀和关系可得</span></span><br><span class=\"line\">a[l<span class=\"number\">-1</span>] = b[<span class=\"number\">1</span>]+b[<span class=\"number\">2</span>]+...+b[l<span class=\"number\">-1</span>]; <span class=\"comment\">//b[1]~b[l-1]中所有值都未改变，a[l-1]也不变</span></span><br><span class=\"line\">a[l] = b[<span class=\"number\">1</span>]+b[<span class=\"number\">2</span>]+...+b[l<span class=\"number\">-1</span>]+b[l]; <span class=\"comment\">//b[1] += c,所以a[l] += c</span></span><br><span class=\"line\">a[l+<span class=\"number\">1</span>] = b[<span class=\"number\">1</span>]+b[<span class=\"number\">2</span>]+...+b[l<span class=\"number\">-1</span>]+b[l]+b[l+<span class=\"number\">1</span>]; <span class=\"comment\">//b[1] += c,所以a[l+1] += c</span></span><br><span class=\"line\">... <span class=\"comment\">//一直到</span></span><br><span class=\"line\">a[r] = b[<span class=\"number\">1</span>]+b[<span class=\"number\">2</span>]+...b[l]+...+b[r];  <span class=\"comment\">//b[1] += c,所以a[l+1] += c</span></span><br><span class=\"line\">a[r+<span class=\"number\">1</span>] = b[<span class=\"number\">1</span>]+b[<span class=\"number\">2</span>]+...b[l]+...+b[r]+b[r+<span class=\"number\">1</span>]; <span class=\"comment\">//b[l] += c,b[r+1] -= c;所以a[r+1]不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所以由此可知上面的两个语句（b[l] += c;b[r+1] -= c）可以实现a数组在区间[l,r]内的所有值都加上了常数c</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、方法\"><a href=\"#3、方法\" class=\"headerlink\" title=\"3、方法\"></a>3、方法</h3><p>对a数组区间[l,r]同时加上c的操作可转化为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[l] += c;</span><br><span class=\"line\">    b[r+<span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(m--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c);</span><br><span class=\"line\">    <span class=\"built_in\">insert</span>(l,r,c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> 对b数组求前缀和即可得到原数组a：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    b[i] += b[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,b[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、二维差分\"><a href=\"#三、二维差分\" class=\"headerlink\" title=\"三、二维差分\"></a>三、二维差分</h2><h3 id=\"1、定义-1\"><a href=\"#1、定义-1\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h3><p>二维差分是指对于一个n*m的矩阵a，要求支持操作pro(x1,y1,x2,y2,a)，表示对于以(x1,y1)为左上角，(x2,y2)为右下角的矩形区域，每个元素都加上常数a。求修改后的矩阵a。</p>\n<h3 id=\"2、作用-1\"><a href=\"#2、作用-1\" class=\"headerlink\" title=\"2、作用\"></a>2、作用</h3><p>与一维差分一样二维差分可以把对矩阵的同一操作优化到O(1)。</p>\n<p><img src=\"/../images/image-20230214154301674.png\" alt=\"image-20230214154301674\"></p>\n<h3 id=\"3、方法-1\"><a href=\"#3、方法-1\" class=\"headerlink\" title=\"3、方法\"></a>3、方法</h3><p>紫色矩形区域同时加上一个常数，由图可以得到插入函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> y1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> y2,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x2+<span class=\"number\">1</span>][y1] -= c;</span><br><span class=\"line\">    b[x1][y2+<span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    b[x2+<span class=\"number\">1</span>][y2+<span class=\"number\">1</span>] += c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> 初始化可以视为在(i,j)和(i,j)的小矩形内插入a[i][j]；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"built_in\">insert</span>(i,j,i,j,a[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> 对二维差分数组求二维前缀和可以得到原数组：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[i][j] += b[i<span class=\"number\">-1</span>][j] + b[i][j<span class=\"number\">-1</span>] - b[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,b[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h3><p><img src=\"/../images/image-20230214154412211.png\" alt=\"image-20230214154412211\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N][N],b[N][N];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> y1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> y2,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x2+<span class=\"number\">1</span>][y1] -= c;</span><br><span class=\"line\">    b[x1][y2+<span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    b[x2+<span class=\"number\">1</span>][y2+<span class=\"number\">1</span>] += c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           <span class=\"built_in\">insert</span>(i,j,i,j,a[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x1,y1,x2,y2,c;</span><br><span class=\"line\">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class=\"line\">        <span class=\"built_in\">insert</span>(x1,y1,x2,y2,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           b[i][j] += b[i<span class=\"number\">-1</span>][j] + b[i][j<span class=\"number\">-1</span>] - b[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,b[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"/../images/image-20230214154502530.png\" alt=\"image-20230214154502530\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>树状数组插入和查询都可以优化到O(logn)。差分和前缀和适合用在查询或修改次数十分巨大的时候，当修改和查询在同一复杂度时适合用树状数组。</p>\n","categories":[],"tags":[{"name":"算法，差分算法","slug":"算法，差分算法","count":1,"path":"api/tags/算法，差分算法.json"}]}