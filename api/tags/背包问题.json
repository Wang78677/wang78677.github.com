{"name":"背包问题","slug":"背包问题","count":1,"postlist":[{"title":"0/1背包问题","slug":"0-1背包问题","date":"2023-02-11T16:00:00.000Z","updated":"2023-02-12T06:56:49.734Z","comments":true,"path":"api/articles/0-1背包问题.json","excerpt":"","keywords":null,"cover":"/../images/image-20230212145322736.png","content":"<h1 id=\"0-x2F-1背包问题\"><a href=\"#0-x2F-1背包问题\" class=\"headerlink\" title=\"0&#x2F;1背包问题\"></a>0&#x2F;1背包问题</h1><h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>有n个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？</p>\n<p><img src=\"/../images/image-20230212145322736.png\" alt=\"image-20230212145322736\"></p>\n<h2 id=\"总体思路\"><a href=\"#总体思路\" class=\"headerlink\" title=\"总体思路\"></a>总体思路</h2><p>根据<strong>动态规划解题的步骤</strong>（问题抽象化、建立模型、寻找约束条件、判断是否满足最优性原理、找大问题与小问题的递推关系式、填表、寻找解组成）找到01背包问题的最优解以及解组成，然后编写代码实现</p>\n<h2 id=\"动态规划原理\"><a href=\"#动态规划原理\" class=\"headerlink\" title=\"动态规划原理\"></a>动态规划原理</h2><p>动态规划与分治法类似，都是把大问题拆分成小问题，通过寻找大问题与小问题的递推关系，解决一个个小问题，最终达到解决原问题的效果。</p>\n<p>但不同的是，分治法在子问题和子子问题等上被重复计算了很多次，而动态规划则具有<strong>记忆性</strong>，通过填写表把所有已经解决的子问题答案记录下来，在新问题里需要用到的子问题可以直接提取，避免了重复计算，从而节约了时间，所以在问题满足最优性原理之后，用动态规划解决问题的核心就在于填表，表填写完毕，最优解也就找到。</p>\n<p>最优性原理是动态规划的基础，最优性原理是指“多阶段决策过程的最优决策序列具有这样的性质：不论初始状态和初始决策如何，对于前面决策所造成的某一状态而言，其后各阶段的决策序列必须构成最有策略”</p>\n<h2 id=\"背包问题的解决过程\"><a href=\"#背包问题的解决过程\" class=\"headerlink\" title=\"背包问题的解决过程\"></a>背包问题的解决过程</h2><p>Vi表示第i个物品的价值，Wi表示第i个物品的体积，V(i,j)表示当前背包容量j，前i个物品最佳组合对应的价值，同时背包问题抽象化（X1，X2，X3，…，Xn，其中Xi取0或1，表示第i个物品选或不选）</p>\n<ol>\n<li><p>建立模型，即求max（V1X1+V2X2+…)</p>\n</li>\n<li><p>寻找约束条件，W1X1+W2X2+…&lt;bagV</p>\n</li>\n<li><p>寻找递推关系式，面对当前商品有两种可能性</p>\n<ul>\n<li>包的容量比该商品小，装不下，此时的价值与前i-1的价值是一样的，即V(i,j)&#x3D;V(i-1,j);</li>\n<li>还有足够的容量可以装该商品，但装了也不一定达到当前的最优价值，所以在装与不装之间选择最优的一个，即V(i,j)&#x3D;max{V(i-1,j),V(i-1,j-w(i))+v(i)}</li>\n</ul>\n<p>其中V(i-1,j)表示不装，V(i-1,j-w(i))+v(i)表示装了第i个商品，背包容量减少w(i)，但价值增加了v(i)</p>\n<p>由此可以得出递推关系式：</p>\n<ul>\n<li>j&lt;w(i) 即V(i,j)&#x3D;V(i-1,j)</li>\n<li>j&gt;&#x3D;w(i) 即V(i,j)&#x3D;max{V(i-1,j),V(i-1,j-w(i))+v(i)}</li>\n</ul>\n<p>这里需要解释一下，为什么能装的情况下，需要这样求解（这次是本问题的关键所在）：</p>\n<p>要达到V(i,j)的状态需要两种方式，第一种是第i件商品没有装进去，第二种是第i件商品装进去了。没有装进去很好理解，就是V(i-1,j)；装进去了怎么理解呢？如果装进去第i件商品，那么装入之前是什么状态，肯定是V(i-1,j-w(i))。由于最优性原理（上文讲到），V(i-1,j-w(i))就是前面决策造成的一种状态，后面的决策就要构成最优策略。两种情况进行比较，得出最优。</p>\n</li>\n<li><p>填表，首先初始化边界条件V(0,j)&#x3D;0,V(i,0)&#x3D;0</p>\n<p><img src=\"/../images/image-20230212145211018.png\" alt=\"image-20230212145211018\"></p>\n</li>\n<li><p>最优解即为V(4,8)&#x3D;10</p>\n</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> w[<span class=\"number\">5</span>] = &#123; <span class=\"number\">0</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> &#125;;\t\t\t<span class=\"comment\">//商品的体积2、3、4、5</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> v[<span class=\"number\">5</span>] = &#123; <span class=\"number\">0</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> , <span class=\"number\">6</span> &#125;;\t\t\t<span class=\"comment\">//商品的价值3、4、5、6</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> bagV = <span class=\"number\">8</span>;\t\t\t\t\t        <span class=\"comment\">//背包大小</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> dp[<span class=\"number\">5</span>][<span class=\"number\">9</span>] = &#123; &#123; <span class=\"number\">0</span> &#125; &#125;;\t\t\t        <span class=\"comment\">//动态规划表</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= bagV; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; w[i])</span><br><span class=\"line\">\t\t\t\tdp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tdp[i][j] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>][j], dp[i - <span class=\"number\">1</span>][j - w[i]] + v[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//动态规划表的输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; dp[i][j] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"背包问题最优回溯\"><a href=\"#背包问题最优回溯\" class=\"headerlink\" title=\"背包问题最优回溯\"></a>背包问题最优回溯</h2><p>通过上面的方法可以求出背包问题的最优解，但还不知道这个最优解由哪些商品组成，故要根据最优解回溯找出解的组成，根据填表的原理可以有如下的寻解方式：</p>\n<ul>\n<li>V(i,j)&#x3D;V(i-1,j)时，说明没有选择第i 个商品，则回到V(i-1,j)；</li>\n<li>V(i,j)&#x3D;V(i-1,j-w(i))+v(i)时，说明装了第i个商品，该商品是最优解组成的一部分，随后我们得回到装该商品之前，即回到V(i-1,j-w(i))；</li>\n<li>一直遍历到i＝0结束为止，所有解的组成都会找到。</li>\n</ul>\n<p>就拿上面的例子来说吧：</p>\n<ul>\n<li>最优解为V(4,8)&#x3D;10，而V(4,8)!&#x3D;V(3,8)却有V(4,8)&#x3D;V(3,8-w(4))+v(4)&#x3D;V(3,3)+6&#x3D;4+6&#x3D;10，所以第4件商品被选中，并且回到V(3,8-w(4))&#x3D;V(3,3)；</li>\n<li>有V(3,3)&#x3D;V(2,3)&#x3D;4，所以第3件商品没被选择，回到V(2,3)；</li>\n<li>而V(2,3)!&#x3D;V(1,3)却有V(2,3)&#x3D;V(1,3-w(2))+v(2)&#x3D;V(1,0)+4&#x3D;0+4&#x3D;4，所以第2件商品被选中，并且回到V(1,3-w(2))&#x3D;V(1,0)；</li>\n<li>有V(1,0)&#x3D;V(0,0)&#x3D;0，所以第1件商品没被选择。</li>\n</ul>\n<p><img src=\"/../images/image-20230212145608341.png\" alt=\"image-20230212145608341\"></p>\n<h2 id=\"代码实现：\"><a href=\"#代码实现：\" class=\"headerlink\" title=\"代码实现：\"></a>代码实现：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> w[<span class=\"number\">5</span>] = &#123; <span class=\"number\">0</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> &#125;;\t\t\t<span class=\"comment\">//商品的体积2、3、4、5</span></span><br><span class=\"line\"><span class=\"type\">int</span> v[<span class=\"number\">5</span>] = &#123; <span class=\"number\">0</span> , <span class=\"number\">3</span> , <span class=\"number\">4</span> , <span class=\"number\">5</span> , <span class=\"number\">6</span> &#125;;\t\t\t<span class=\"comment\">//商品的价值3、4、5、6</span></span><br><span class=\"line\"><span class=\"type\">int</span> bagV = <span class=\"number\">8</span>;\t\t\t\t\t        <span class=\"comment\">//背包大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> dp[<span class=\"number\">5</span>][<span class=\"number\">9</span>] = &#123; &#123; <span class=\"number\">0</span> &#125; &#125;;\t\t\t        <span class=\"comment\">//动态规划表</span></span><br><span class=\"line\"><span class=\"type\">int</span> item[<span class=\"number\">5</span>];\t\t\t\t\t        <span class=\"comment\">//最优解情况</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">findMax</span><span class=\"params\">()</span> </span>&#123;\t\t\t\t\t<span class=\"comment\">//动态规划</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= bagV; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt; w[i])</span><br><span class=\"line\">\t\t\t\tdp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tdp[i][j] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>][j], dp[i - <span class=\"number\">1</span>][j - w[i]] + v[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">findWhat</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123;\t\t\t\t<span class=\"comment\">//最优解情况</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dp[i][j] == dp[i - <span class=\"number\">1</span>][j]) &#123;</span><br><span class=\"line\">\t\t\titem[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">findWhat</span>(i - <span class=\"number\">1</span>, j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j - w[i] &gt;= <span class=\"number\">0</span> &amp;&amp; dp[i][j] == dp[i - <span class=\"number\">1</span>][j - w[i]] + v[i]) &#123;</span><br><span class=\"line\">\t\t\titem[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">findWhat</span>(i - <span class=\"number\">1</span>, j - w[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;\t\t\t<span class=\"comment\">//动态规划表输出</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; dp[i][j] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)\t\t\t<span class=\"comment\">//最优解输出</span></span><br><span class=\"line\">\t\tcout &lt;&lt; item[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">findMax</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">findWhat</span>(<span class=\"number\">4</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>原文链接：<a href=\"https://blog.csdn.net/qq_38410730/article/details/81667885\">https://blog.csdn.net/qq_38410730/article/details/81667885</a></p>\n","text":"0&#x2F;1背包问题问题描述有n个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？ [Figure] 原文链接：https://blog.csdn.net/qq_38410730/article/details/81667885","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"},{"name":"背包问题","slug":"背包问题","count":1,"path":"api/tags/背包问题.json"}]}]}